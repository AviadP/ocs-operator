syntax = "proto3";
package provider;

import "google/protobuf/descriptor.proto";

option go_package = "./;providerpb";


// OCSProvider holds the RPC methods that the OCS consumer can use to communicate with remote OCS provider cluster
service OCSProvider {
  // OnboardConsumer RPC call to validate the consumer and create StorageConsumer
  // resource on the StorageProvider cluster
  rpc OnboardConsumer (OnboardConsumerRequest)
  returns (OnboardConsumerResponse) {}
  // GetStorageConfig RPC call to generate the json config for connecting to storage provider cluster
  rpc GetStorageConfig(StorageConfigRequest)
  returns (StorageConfigResponse){}
  // OffboardConsumer RPC call to delete StorageConsumer CR on the storage provider cluster.
  rpc OffboardConsumer (OffboardConsumerRequest)
  returns (OffboardConsumerResponse) {}
  // UpdateCapacity PRC call to increase or decrease the block pool size
  rpc UpdateCapacity(UpdateCapacityRequest)
  returns (UpdateCapacityResponse){}
}

// OnboardConsumerRequest holds the required information to validate the consumer and create StorageConsumer
// resource on the StorageProvider cluster
message OnboardConsumerRequest{
    // token authenticates the storage consumer cluster
    string token = 1;
    // consumerName is the name of the consumer that is used to create the storageConsumer resource
    string consumerName = 2;
    // capacity is the desired storage requested by the consumer cluster
    string capacity = 3;
}

// OnboardConsumerResponse holds the response for OnboardConsumer API request
message OnboardConsumerResponse{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID =1;
    // grantedCapacity is the storage granted by the provider cluster
    string grantedCapacity = 2;
}


// StorageConfigRequest holds the information required generate the json config for connecting to storage provider cluster
message StorageConfigRequest{
    // K8s UID (UUID) of the consumer cluster
     string storageConsumerUUID =1;
 }

// StorageConfigResponse holds the response for the GetStorageConfig API request
message StorageConfigResponse{
     // data contains the json blob to be used by the consumer cluster to connect with the provider cluster
     bytes data = 1;
 }


// OffboardConsumerRequest holds the required information to delete the StorageConsumer CR on the storage provider cluster.
message OffboardConsumerRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID =1;
}

// OffboardConsumerResponse holds the response for the OffboardConsumer API request
message OffboardConsumerResponse{

}


// UpdateCapacityRequest holds the information required to increase or decrease the block pool size
// on the provider cluster
message UpdateCapacityRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID =1;
    // capacity is the desired storage requested by the consumer cluster
    string capacity = 2;
}

// UpdateCapacityResponse holds the response for UpdateCapacity API request
message UpdateCapacityResponse{
    // grantedCapacity is the storage granted by the provider cluster
    string grantedCapacity = 2;
}
